1- Usa-se o comando yarn init -y para gerar o arquivo package.json
2- instala a biblioteca express pelo comando yarn add express, no terminal do visual code
3 - cria o index.js
4 - utiliza node index.js para executar o código
5 - Instala o yarn add nodemon -D como uma dependência de desenvolvimento (que não vai ser utilizada quando o app estiver no ar, somente no desenvolvimento)
    * O nodemon permite o hot reload ao node
    * Podemos executar agora pelo comando yarn nodemon index.js
6- Lá no package.json, criamos um "script" indicando que o comando "dev" irá executar o nodemon index.js
7- Instalar o Insomnia para testar os métodos get, post, put e delete
8 - Usar MongoDB, pois é um banco não relacional, já que a aplicação n exige muita relação de tabelas. Ele é hospedado na nuvem
9 - Instala o mongoose no terminal via yarn add mongoose. Isso irá permitir vincular o MongoDb com a aplicação
10 - yarn add axios, para instalar a bibliteca axios que faz chamadas para outras APIs
11 - cria o PointSchema.js dentro de utils, dentro de models, para recuperar a localização do dev
12 - Cria o projeto React pelo comando yarn create react-app "nome da pasta a ser criada"
13 - Para inicializar o projeto react, usa-se o comando yarn start (isso dentro da pasta criada para o react)
14 - Adiciona a extensão chamada Cors via yarn add cors na pasta BACKEND, para poder permitir o acesso à api de localização por outros endereços, e não apenas pela porta 3333
15- Só como informação: Usa-se para o mobile, o JavaScript Core que permite os dipositivos móveis interpretarem o Js
16- Para o mobile, na pasta raíz (semanaomnistack10), usa-se o comando yarn global add expo-cli para a instalação do expo
17 - Para inicializar o expo, usa-se o comando expo init mobile (mobile é o nome do projeto, no caso), na pasta raiz ainda (semanaomnistack10). Quando pedir o template, escolhemos o template blank
18 - Após criar o expo com sucesso, migramos para a pasta mobile criada e em seguida, demos o comando yarn start
19 - Devemos instalar o React Navigation para permitir a navegação entre diferentes rotas no app. site (https://reactnavigation.org/docs/en/getting-started.html). Usar comando: yarn add react-navigation
20 - Seguindo a instalação do React Navigation, usa-se o comando "expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context", para quem está uisando o expo já
21 - Instala a navegação por pilhas via "yarn add react-navigation stack". É a navegação através de botões, abas e drawers
22 - Outra extensão do React Navigation Stack que deve ser instalada é o comando "yarn add @react-native-community/masked-view"
23 - Para utilizar a API de Mapas, usa-se um comando disponibilizado na própria documentação do expo (https://docs.expo.io/versions/v36.0.0/sdk/map-view/), "expo install react-native-maps"
24 - Instala a API de localização do Expo, para conseguir recuperar a localização do usuário (https://docs.expo.io/versions/v36.0.0/sdk/location/). O comando é "expo install expo-location"
25 - Instalar a API do Expo que permite a visualização do navegador na aplicação (https://docs.expo.io/versions/v36.0.0/sdk/webview/). Instala via comando "expo install react-native-webview"
26 - NÃO FOI FEITO NO APP, MAS DEVEMOS VER NA DOCUMENTAÇÃO DO EXPO SOBRE O COMPONENTE KEYBOARD, PARA SUBIR O INPUT DE BUSCA DE TECHS QUANDO O TECLADO ESTIVER ABERTO
27 - Para a atualização do mapa em TEMPO REAL ao adicionar um dev novo, usa-se o Protocolo WebSocket. Para instalar, mudamos para a pasta backend e lá coloca o comando "yarn add socket.io"
28 - Instala o mesmo protocolo WebSocket, mas dessa vez na pasta Mobile. Lá usa-se o comando "yarn add socket.io-client"